# SPDX-FileCopyrightText: Copyright (C) 2025 FabrÃ­cio Barros Cabral
# SPDX-License-Identifier: MIT
---
name: c-cpp-build
'on':
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
defaults:
  run:
    shell: bash -xeuo pipefail {0}
permissions:
  contents: read
jobs:
  c-cpp-linux-build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf automake libtool \
            pkg-config libpcap-dev tcl-dev
      - name: Configure and build
        run: |
          [ -x ./autogen.sh ] && ./autogen.sh
          ./configure
          make
      - name: Get properties from configure.ac
        id: props
        # yamllint disable rule:line-length
        run: |
          name="$(sed -n 's/AC_INIT(\[\([^]]*\)\],.*/\1/p' configure.ac)"
          echo "name=${name}" >> "${GITHUB_OUTPUT}"
          version="$(sed -n 's/AC_INIT(\[[^]]*\], \[\([^]]*\)\], \[[^]]*\])/\1/p' configure.ac)"
          echo "version=${version}" >> "${GITHUB_OUTPUT}"
        # yamllint enable rule:line-length
      - name: Create source package
        run: |
          make dist
      - name: Create Linux binary package
        run: |
          make binary-dist
      - name: Prepare packages to distribution
        env:
          NAME: ${{ steps.props.outputs.name }}
          VERSION: ${{ steps.props.outputs.version }}
        run: |
          # Sanitize variables for security purposes
          safe_name="$(echo "${NAME}" | tr -cd '[:alnum:]._-' )"
          safe_version="$(echo "${VERSION}" | tr -cd '[:alnum:]._-' )"

          # Check if variables are empty
          [ -z "$safe_name" ] && { echo "Invalid name"; exit 1; }
          [ -z "$safe_version" ] && { echo "Invalid version"; exit 1; }

          # Check if files exists
          src="${safe_name}-${safe_version}.tar.gz"
          bin="${safe_name}-${safe_version}-bin.tar.gz"
          [ -f "$src" ] || { echo "File '${src}' not found"; exit 1; }
          [ -f "$bin" ] || { echo "File '${bin}' not found"; exit 1; }

          # Move files
          mkdir -p dist
          mv "${src}" dist/
          mv "${bin}" "dist/${safe_name}-${safe_version}-linux.tar.gz"
  c-cpp-macos-build:
    runs-on: macos-15
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Install dependencies
        run: |
          brew update
          brew upgrade
          brew install autoconf automake libtool libpcap tcl-tk
      - name: Configure and build
        run: |
          [ -x ./autogen.sh ] && ./autogen.sh
          ./configure
          make
      - name: Get properties from configure.ac
        id: props
        # yamllint disable rule:line-length
        run: |
          name="$(sed -n 's/AC_INIT(\[\([^]]*\)\],.*/\1/p' configure.ac)"
          echo "name=${name}" >> "${GITHUB_OUTPUT}"
          version="$(sed -n 's/AC_INIT(\[[^]]*\], \[\([^]]*\)\], \[[^]]*\])/\1/p' configure.ac)"
          echo "version=${version}" >> "${GITHUB_OUTPUT}"
        # yamllint enable rule:line-length
      - name: Create macOS binary package
        run: |
          make binary-dist
      - name: Prepare package to distribution
        env:
          NAME: ${{ steps.props.outputs.name }}
          VERSION: ${{ steps.props.outputs.version }}
        run: |
          # Sanitize variables for security purposes
          safe_name="$(echo "${NAME}" | tr -cd '[:alnum:]._-' )"
          safe_version="$(echo "${VERSION}" | tr -cd '[:alnum:]._-' )"

          # Check if variables are empty
          [ -z "$safe_name" ] && { echo "Invalid name"; exit 1; }
          [ -z "$safe_version" ] && { echo "Invalid version"; exit 1; }

          # Check if file exist
          bin="${safe_name}-${safe_version}-bin.tar.gz"
          [ -f "$bin" ] || { echo "File '${bin}' not found"; exit 1; }

          # Move file
          mkdir -p dist
          mv "${bin}" dist/"${safe_name}-${safe_version}-macos.tar.gz"
  c-cpp-windows-build:
    runs-on: windows-2022
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Install dependencies
        run: |
          choco install -y make gcc pkg-config npcap
      - name: Configure and build
        run: |
          autogen.cmd
          configure
          make
      - name: Get properties from configure.ac
        id: props
        # yamllint disable rule:line-length
        run: |
          name="$(sed -n 's/AC_INIT(\[\([^]]*\)\],.*/\1/p' configure.ac)"
          echo "name=${name}" >> "${GITHUB_OUTPUT}"
          version="$(sed -n 's/AC_INIT(\[[^]]*\], \[\([^]]*\)\], \[[^]]*\])/\1/p' configure.ac)"
          echo "version=${version}" >> "${GITHUB_OUTPUT}"
        # yamllint enable rule:line-length
      - name: Create source package
        run: |
          make dist
      - name: Create Windows binary package
        run: |
          make binary-dist
      - name: Prepare packages to distribution
        env:
          NAME: ${{ steps.props.outputs.name }}
          VERSION: ${{ steps.props.outputs.version }}
        # yamllint disable rule:line-length
        run: |
          md dist
          move "${NAME}-${VERSION}-bin.zip" "dist/${NAME}-${VERSION}-windows.zip"
        # yamllint enable rule:line-length
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-dist
          path: dist/*.zip
